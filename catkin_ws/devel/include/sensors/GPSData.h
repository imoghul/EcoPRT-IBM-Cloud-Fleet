// Generated by gencpp from file sensors/GPSData.msg
// DO NOT EDIT!


#ifndef SENSORS_MESSAGE_GPSDATA_H
#define SENSORS_MESSAGE_GPSDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensors
{
template <class ContainerAllocator>
struct GPSData_
{
  typedef GPSData_<ContainerAllocator> Type;

  GPSData_()
    : time()
    , lat(0.0)
    , long(0.0)  {
    }
  GPSData_(const ContainerAllocator& _alloc)
    : time(_alloc)
    , lat(0.0)
    , long(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _time_type;
  _time_type time;

   typedef double _lat_type;
  _lat_type lat;

   typedef double _long_type;
  _long_type long;





  typedef boost::shared_ptr< ::sensors::GPSData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensors::GPSData_<ContainerAllocator> const> ConstPtr;

}; // struct GPSData_

typedef ::sensors::GPSData_<std::allocator<void> > GPSData;

typedef boost::shared_ptr< ::sensors::GPSData > GPSDataPtr;
typedef boost::shared_ptr< ::sensors::GPSData const> GPSDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensors::GPSData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensors::GPSData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensors::GPSData_<ContainerAllocator1> & lhs, const ::sensors::GPSData_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.lat == rhs.lat &&
    lhs.long == rhs.long;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensors::GPSData_<ContainerAllocator1> & lhs, const ::sensors::GPSData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensors

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sensors::GPSData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensors::GPSData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensors::GPSData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensors::GPSData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensors::GPSData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensors::GPSData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensors::GPSData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6be0f4d623467dbac7ec64212189b37c";
  }

  static const char* value(const ::sensors::GPSData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6be0f4d623467dbaULL;
  static const uint64_t static_value2 = 0xc7ec64212189b37cULL;
};

template<class ContainerAllocator>
struct DataType< ::sensors::GPSData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensors/GPSData";
  }

  static const char* value(const ::sensors::GPSData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensors::GPSData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string time\n"
"float64 lat\n"
"float64 long\n"
;
  }

  static const char* value(const ::sensors::GPSData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensors::GPSData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.lat);
      stream.next(m.long);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GPSData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensors::GPSData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensors::GPSData_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.time);
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "long: ";
    Printer<double>::stream(s, indent + "  ", v.long);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSORS_MESSAGE_GPSDATA_H

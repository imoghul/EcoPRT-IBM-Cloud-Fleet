# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sensors/IMUData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class IMUData(genpy.Message):
  _md5sum = "34b732ae811cee8c11c282e3af23a7b1"
  _type = "sensors/IMUData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 AxCalib
float64 AyCalib
float64 AzCalib
float64 Ax
float64 Ay
float64 Az
float64 AxRaw
float64 AyRaw
float64 AzRaw
float64 Vx
float64 Vy
float64 Vz
float64 Gx
float64 Gy
float64 Gz
float64 currTime
"""
  __slots__ = ['AxCalib','AyCalib','AzCalib','Ax','Ay','Az','AxRaw','AyRaw','AzRaw','Vx','Vy','Vz','Gx','Gy','Gz','currTime']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       AxCalib,AyCalib,AzCalib,Ax,Ay,Az,AxRaw,AyRaw,AzRaw,Vx,Vy,Vz,Gx,Gy,Gz,currTime

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IMUData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.AxCalib is None:
        self.AxCalib = 0.
      if self.AyCalib is None:
        self.AyCalib = 0.
      if self.AzCalib is None:
        self.AzCalib = 0.
      if self.Ax is None:
        self.Ax = 0.
      if self.Ay is None:
        self.Ay = 0.
      if self.Az is None:
        self.Az = 0.
      if self.AxRaw is None:
        self.AxRaw = 0.
      if self.AyRaw is None:
        self.AyRaw = 0.
      if self.AzRaw is None:
        self.AzRaw = 0.
      if self.Vx is None:
        self.Vx = 0.
      if self.Vy is None:
        self.Vy = 0.
      if self.Vz is None:
        self.Vz = 0.
      if self.Gx is None:
        self.Gx = 0.
      if self.Gy is None:
        self.Gy = 0.
      if self.Gz is None:
        self.Gz = 0.
      if self.currTime is None:
        self.currTime = 0.
    else:
      self.AxCalib = 0.
      self.AyCalib = 0.
      self.AzCalib = 0.
      self.Ax = 0.
      self.Ay = 0.
      self.Az = 0.
      self.AxRaw = 0.
      self.AyRaw = 0.
      self.AzRaw = 0.
      self.Vx = 0.
      self.Vy = 0.
      self.Vz = 0.
      self.Gx = 0.
      self.Gy = 0.
      self.Gz = 0.
      self.currTime = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_16d().pack(_x.AxCalib, _x.AyCalib, _x.AzCalib, _x.Ax, _x.Ay, _x.Az, _x.AxRaw, _x.AyRaw, _x.AzRaw, _x.Vx, _x.Vy, _x.Vz, _x.Gx, _x.Gy, _x.Gz, _x.currTime))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 128
      (_x.AxCalib, _x.AyCalib, _x.AzCalib, _x.Ax, _x.Ay, _x.Az, _x.AxRaw, _x.AyRaw, _x.AzRaw, _x.Vx, _x.Vy, _x.Vz, _x.Gx, _x.Gy, _x.Gz, _x.currTime,) = _get_struct_16d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_16d().pack(_x.AxCalib, _x.AyCalib, _x.AzCalib, _x.Ax, _x.Ay, _x.Az, _x.AxRaw, _x.AyRaw, _x.AzRaw, _x.Vx, _x.Vy, _x.Vz, _x.Gx, _x.Gy, _x.Gz, _x.currTime))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 128
      (_x.AxCalib, _x.AyCalib, _x.AzCalib, _x.Ax, _x.Ay, _x.Az, _x.AxRaw, _x.AyRaw, _x.AzRaw, _x.Vx, _x.Vy, _x.Vz, _x.Gx, _x.Gy, _x.Gz, _x.currTime,) = _get_struct_16d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16d = None
def _get_struct_16d():
    global _struct_16d
    if _struct_16d is None:
        _struct_16d = struct.Struct("<16d")
    return _struct_16d

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sensors/IMUData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class IMUData(genpy.Message):
  _md5sum = "e854ee703c7cc2b23f6a5df92872cf41"
  _type = "sensors/IMUData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Float64 AxCalib
std_msgs/Float64 AyCalib
std_msgs/Float64 AzCalib
std_msgs/Float64 Ax
std_msgs/Float64 Ay
std_msgs/Float64 Az
std_msgs/Float64 AxRaw
std_msgs/Float64 AyRaw
std_msgs/Float64 AzRaw
std_msgs/Float64 Vx
std_msgs/Float64 Vy
std_msgs/Float64 Vz
std_msgs/Float64 Gx
std_msgs/Float64 Gy
std_msgs/Float64 Gz
std_msgs/Float64 currTime

================================================================================
MSG: std_msgs/Float64
float64 data"""
  __slots__ = ['AxCalib','AyCalib','AzCalib','Ax','Ay','Az','AxRaw','AyRaw','AzRaw','Vx','Vy','Vz','Gx','Gy','Gz','currTime']
  _slot_types = ['std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64','std_msgs/Float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       AxCalib,AyCalib,AzCalib,Ax,Ay,Az,AxRaw,AyRaw,AzRaw,Vx,Vy,Vz,Gx,Gy,Gz,currTime

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IMUData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.AxCalib is None:
        self.AxCalib = std_msgs.msg.Float64()
      if self.AyCalib is None:
        self.AyCalib = std_msgs.msg.Float64()
      if self.AzCalib is None:
        self.AzCalib = std_msgs.msg.Float64()
      if self.Ax is None:
        self.Ax = std_msgs.msg.Float64()
      if self.Ay is None:
        self.Ay = std_msgs.msg.Float64()
      if self.Az is None:
        self.Az = std_msgs.msg.Float64()
      if self.AxRaw is None:
        self.AxRaw = std_msgs.msg.Float64()
      if self.AyRaw is None:
        self.AyRaw = std_msgs.msg.Float64()
      if self.AzRaw is None:
        self.AzRaw = std_msgs.msg.Float64()
      if self.Vx is None:
        self.Vx = std_msgs.msg.Float64()
      if self.Vy is None:
        self.Vy = std_msgs.msg.Float64()
      if self.Vz is None:
        self.Vz = std_msgs.msg.Float64()
      if self.Gx is None:
        self.Gx = std_msgs.msg.Float64()
      if self.Gy is None:
        self.Gy = std_msgs.msg.Float64()
      if self.Gz is None:
        self.Gz = std_msgs.msg.Float64()
      if self.currTime is None:
        self.currTime = std_msgs.msg.Float64()
    else:
      self.AxCalib = std_msgs.msg.Float64()
      self.AyCalib = std_msgs.msg.Float64()
      self.AzCalib = std_msgs.msg.Float64()
      self.Ax = std_msgs.msg.Float64()
      self.Ay = std_msgs.msg.Float64()
      self.Az = std_msgs.msg.Float64()
      self.AxRaw = std_msgs.msg.Float64()
      self.AyRaw = std_msgs.msg.Float64()
      self.AzRaw = std_msgs.msg.Float64()
      self.Vx = std_msgs.msg.Float64()
      self.Vy = std_msgs.msg.Float64()
      self.Vz = std_msgs.msg.Float64()
      self.Gx = std_msgs.msg.Float64()
      self.Gy = std_msgs.msg.Float64()
      self.Gz = std_msgs.msg.Float64()
      self.currTime = std_msgs.msg.Float64()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_16d().pack(_x.AxCalib.data, _x.AyCalib.data, _x.AzCalib.data, _x.Ax.data, _x.Ay.data, _x.Az.data, _x.AxRaw.data, _x.AyRaw.data, _x.AzRaw.data, _x.Vx.data, _x.Vy.data, _x.Vz.data, _x.Gx.data, _x.Gy.data, _x.Gz.data, _x.currTime.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.AxCalib is None:
        self.AxCalib = std_msgs.msg.Float64()
      if self.AyCalib is None:
        self.AyCalib = std_msgs.msg.Float64()
      if self.AzCalib is None:
        self.AzCalib = std_msgs.msg.Float64()
      if self.Ax is None:
        self.Ax = std_msgs.msg.Float64()
      if self.Ay is None:
        self.Ay = std_msgs.msg.Float64()
      if self.Az is None:
        self.Az = std_msgs.msg.Float64()
      if self.AxRaw is None:
        self.AxRaw = std_msgs.msg.Float64()
      if self.AyRaw is None:
        self.AyRaw = std_msgs.msg.Float64()
      if self.AzRaw is None:
        self.AzRaw = std_msgs.msg.Float64()
      if self.Vx is None:
        self.Vx = std_msgs.msg.Float64()
      if self.Vy is None:
        self.Vy = std_msgs.msg.Float64()
      if self.Vz is None:
        self.Vz = std_msgs.msg.Float64()
      if self.Gx is None:
        self.Gx = std_msgs.msg.Float64()
      if self.Gy is None:
        self.Gy = std_msgs.msg.Float64()
      if self.Gz is None:
        self.Gz = std_msgs.msg.Float64()
      if self.currTime is None:
        self.currTime = std_msgs.msg.Float64()
      end = 0
      _x = self
      start = end
      end += 128
      (_x.AxCalib.data, _x.AyCalib.data, _x.AzCalib.data, _x.Ax.data, _x.Ay.data, _x.Az.data, _x.AxRaw.data, _x.AyRaw.data, _x.AzRaw.data, _x.Vx.data, _x.Vy.data, _x.Vz.data, _x.Gx.data, _x.Gy.data, _x.Gz.data, _x.currTime.data,) = _get_struct_16d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_16d().pack(_x.AxCalib.data, _x.AyCalib.data, _x.AzCalib.data, _x.Ax.data, _x.Ay.data, _x.Az.data, _x.AxRaw.data, _x.AyRaw.data, _x.AzRaw.data, _x.Vx.data, _x.Vy.data, _x.Vz.data, _x.Gx.data, _x.Gy.data, _x.Gz.data, _x.currTime.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.AxCalib is None:
        self.AxCalib = std_msgs.msg.Float64()
      if self.AyCalib is None:
        self.AyCalib = std_msgs.msg.Float64()
      if self.AzCalib is None:
        self.AzCalib = std_msgs.msg.Float64()
      if self.Ax is None:
        self.Ax = std_msgs.msg.Float64()
      if self.Ay is None:
        self.Ay = std_msgs.msg.Float64()
      if self.Az is None:
        self.Az = std_msgs.msg.Float64()
      if self.AxRaw is None:
        self.AxRaw = std_msgs.msg.Float64()
      if self.AyRaw is None:
        self.AyRaw = std_msgs.msg.Float64()
      if self.AzRaw is None:
        self.AzRaw = std_msgs.msg.Float64()
      if self.Vx is None:
        self.Vx = std_msgs.msg.Float64()
      if self.Vy is None:
        self.Vy = std_msgs.msg.Float64()
      if self.Vz is None:
        self.Vz = std_msgs.msg.Float64()
      if self.Gx is None:
        self.Gx = std_msgs.msg.Float64()
      if self.Gy is None:
        self.Gy = std_msgs.msg.Float64()
      if self.Gz is None:
        self.Gz = std_msgs.msg.Float64()
      if self.currTime is None:
        self.currTime = std_msgs.msg.Float64()
      end = 0
      _x = self
      start = end
      end += 128
      (_x.AxCalib.data, _x.AyCalib.data, _x.AzCalib.data, _x.Ax.data, _x.Ay.data, _x.Az.data, _x.AxRaw.data, _x.AyRaw.data, _x.AzRaw.data, _x.Vx.data, _x.Vy.data, _x.Vz.data, _x.Gx.data, _x.Gy.data, _x.Gz.data, _x.currTime.data,) = _get_struct_16d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16d = None
def _get_struct_16d():
    global _struct_16d
    if _struct_16d is None:
        _struct_16d = struct.Struct("<16d")
    return _struct_16d
